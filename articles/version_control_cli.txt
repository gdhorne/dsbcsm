TITLE: Version Control (CLI)
AUTHOR: gdhorne
DATE: Fri Mar  4 06:20:58 UTC 2016
DESC: 
FORMAT: markdown
-----
BODY:

[RStudio][2014] provides seamless integration with the file system to navigate and
manipulate files, the version control system to manage and synchronise local
and remote source code repositories, and the statistical computation and
software development envrionment. However, becoming comfortable with the
command line will improve our productivity as data analysis projects increase
in sophistication and work-flow automation arises.

### Git Commands

[Git][2005] is a distributed version control system allowing any number of
people to collaboratively contribute to software development or other projects.

Let's start exploring basic local and remote repository management at the
command-line. Open a web browser tab and type 'http://127.0.0.1:8000' to access
a terminal session. The user name and password are provided in the
[Toolbox for Tools](../toolbox_for_tools/index.html) tutorial.
By learning a few basic commands to manage a repository we will feel more at
ease and understand what is going on behind the scenes when using RStudio.

<table>
	<tr>
		<th>Command</th>
		<th>Description</th>
		<th>Common Flags</th>
		<th>Arguments</th>
	</tr>
	<tr>
		<td>git init</td>
		<td>initialise a local repository;<br>default is current working directory</td>
		<td></td>
		<td></td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>git branch</td>
		<td>determine the current branch</td>
		<td></td>
		<td></td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>git checkout</td>
		<td>create a new branch in the current repository<br>change to another branch</td>
		<td>-b new_branch</td>
		<td>branch_name<br><br>(mandatory)</td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>git add</td>
		<td>add files to the local repository</td>
		<td>-A (add)<br><br>-u (track file name changes and deletions)</td>
		<td>[directory_path/][file_name]<br><br>(mandatory)</td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>git commit</td>
		<td>commit any changes the local repository</td>
		<td>-a (add)<br><br>-m "message"</td>
		<td>[directory_path/][file_name]<br><br>"a string of characters"<br><br>(optional, mandatory)</td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>git pull</td>
		<td>fetch changes from another repository and merge with current repository</td>
		<td></td>
		<td>source target<br><br>(mandatory)</td>	
	</tr>
	<tr>
	</tr>
	<tr>
		<td>git push</td>
		<td>update remote repository with changes from the local repository</td>
		<td>-u (add upstream (tracking) reference)</td>
		<td>target source <br><br>(mandatory unless -u flag present)</td>	
	</tr>
	<tr>
	</tr>
	<tr>
		<td>git status</td>
		<td>reports the status of the local repository</td>
		<td></td>
		<td></td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>git show</td>
		<td>eports the historical differences of the files<br>in the local repository</td>
		<td></td>
		<td></td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>git merge</td>
		<td>flatten commit history before merging source branch with target branch</td>
		<td>--squash</td>
		<td>branch_name<br><br>(mandatory)</td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td colspan=4>Arguments in brackets are optional but if the 'mandatory' designation is present, at least one of the arguments must be supplied.</td>
	</tr>
</table>

### Hands-on Practise: Basic Git Commands

For each of the examples in this section type the commands to the right of the
command prompt ($) to interactively follow along these examples. Take your time
working through the commands until you fully understand why each command
produces the observed results.

Preliminaries: Configure your email address and username to be used by Git. The
flag --global means apply the configuration to all of your Git repositories on
the computer. The flag --local means apply the confoguration to only the
 current Git repository.

	$ git config [--local | --global] user.email "userid@domain.tld"
	$ git config [--local | --global] user.name "username"

Exercise 1:

Create a local repository.

	$ mkdir data/sample
	$ cd data/sample
	$ pwd
	/home/dst/data/sample
	$ git init
	Initialized empty Git repository in /home/dst/data/sample/.git/
	$ ls -la
	drwxrwxr-x 3 dst dst 4096 Jan 13 19:07 .
	drwxrwxr-x 3 dst dst 4096 Jan 13 19:07 ..
	drwxrwxr-x 7 dst dst 4096 Apr  5 19:09 .git

Exercise 2:

Create an empty README.md file in the local repository.

	$ touch README.md
	$ git add .
	$ git commit -m "initial commit"

	[master (root-commit) b7c48f3] initial commit
	1 file changed, 0 insertions(+), 0 deletions(-)
	create mode 100644 README.md

	$ git status

	On branch master
	nothing to commit, working directory clean

	$ git show

	commit b7c48f3e5cdc772e6a198c3633acd853a69a5778
	Author: gdhorne <nomail@mail.com>
	Date: Wed Jan 13 19:21:21 2016 -0400

		initial commit

	diff --git a/README.md b/README.md
	new file mode 100644
	index 0000000..e69de29

Exercise 3:

Edit the README.md file and type the following markdown into the file.

Markdown:
<pre>
* Avro
* Harrier
* Hornet  
</pre>

	$ nano README.md

Update the local repository's tracking database.

	$ git add -A .
	$ git commit -m "military aircraft"

	[master 8fd8eb8] added content
	1 file changed, 3 insertions(+)

Exercise 4:

Edit the README.md file by adding '* Raptor' and changing 'Avro' to 'Avro Arrow'.

	$ nano README.md
	
Update the local repository's tracking database.

	$ git add .
	$ git commit -m "added Raptor and changed Arrow"

	[master 87d0125] added Raptor
	 1 file changed, 2 insertions(+), 1 deletion(-)

Exercise 5:

Determine whether there are any uncommitted changes.

	$ git status
	On branch master
	nothing to commit, working directory clean

	$ git show

	commit 87d012594aa5a8a39e99d4728dc8c853779587ab
	Author: gdhorne <nomail@mail.com>
	Date:   Wed Jan 13 19:22:51 2016 -0400 

	    added Raptor and changed Arrow

	diff --git a/README.md b/README.md
	index 354fa34..8290523 100644
	--- a/README.md
	+++ b/README.md
	@@ -1,3 +1,4 @@
	-* Avro
	+* Avro Arrow
	 * Harrier
	 * Hornet
	+* Raptor

Exercise 6:

Add a new branch 'aircraft' to the local repository and make it the active
branch.

	$ git checkout -b aircraft
	Switched to a new branch 'aircraft'

	$ git status
	On branch aircraft
	nothing to commit, working directory clean

Exercise 7:

Merge the contents of the 'master' branch with the 'aircraft' branch.

	$ git merge master
	Already up-to-date.

Exercise 8:

Switch to the 'master' branch.

	$ git checkout master
	Switched to branch 'master'

	$ git status
	On branch master
	nothing to commit, working directory clean


### Hands-on Practise: GitHub - Repository Hosting Service

GitHub is a repository hosting service supporting the Git distributed version
control system which facilitates collaboration between any number of people.
Throughout this boot-camp there will be ample opportunity to gain hands-on
experience with local and remote repository management. Additionally, some of
the [Data Science Specialization][1001] courses require learners to submit their
programming assignments via GitHub as part of a peer assessment grading
process.

<img alt="course dependency diagram"
src="../../images/github.png" width="575px" />
&nbsp;&nbsp;&nbsp;&nbsp;*Figure 1 Create an account with GitHub*

Before creating a repository on GitHub you must create an account preferably
with the same name email address used when configuring Git. If you use an
alternate email address and username for your GitHub account, you can associate
the username and email address with this account.

<img alt="course dependency diagram"
src="../../images/personal_plan.png" width="575px" />
&nbsp;&nbsp;&nbsp;&nbsp;*Figure 2 Choose a Personal Plan*

Select the repository hosting plan for your account. The default free plan is
sufficient for peer assessments during the [Johns Hopkins University][1000]
[Data Science Specialization[1000]].

<img alt="new account orientation dashboard"
src="../../images/new_account_orientation_dashboard.png" width="575px" />
&nbsp;&nbsp;&nbsp;&nbsp;*Figure 3 New Account Orientation Dashboard*

After your GitHub account is set-up you are ready to explore the service. You
should update the profile information at the very least before proceeding.

Exercise 9:

Synchronise a local repository with an empty remote repository of the same name
on GitHub.

<u>Command Line Junkies Only</u>

These commands create an empty repository 'sample' on GitHub and push the
content of the local repository to your GitHiub account. Substitute your GitHub
account name for 'user_name' and type your account password when prompted.

	$ curl -u user_name https://api.github.com/user/repos \
			-d "{\"name\":\"sample\",\"description\":\"military aircraft\"}"
	Enter host password for user 'gdhorne':

The repository transaction record shows the type of information tracked by
GitHub. This data can be queried via the GitHub Developer API.

<u>Everyone Else</u>

Create an empty repository on GitHub using the website.

<u>Command Line Junkies and Everyone Else Reunite</u>

	$ git remote add origin https://github.com/user_name/sample.git
	$ git push origin master
	Username for 'https://github.com': gdhorne
	Password for 'https://gdhorne@github.com': 
	Counting objects: 9, done.
	Delta compression using up to 2 threads.
	Compressing objects: 100% (3/3), done.
	Writing objects: 100% (9/9), 681 bytes | 0 bytes/s, done.
	Total 9 (delta 0), reused 0 (delta 0)
	To https://github.com/gdhorne/sample.git
	 * [new branch]      master -> master

The .git extension in the repository name is optional.

When you check the GitHub repository 'sample' there is no branch named
'aircraft'. This demonstrates that pushing from the local repository to a
remote repository only applies to the currently active repository branch or
the explicitly named branch as in this example. If you want to push the
aircraft branch to GitHub,

	$ git push origin aircraft
	Username for 'https://github.com': gdhorne
	Password for 'https://gdhorne@github.com':
	Total 0 (delta 0), reused 0 (delta 0)
	To https://github.com/gdhorne/sample.git
	 * [new branch]      aircraft -> aircraft

Consequently, it is possible to have branches in the local repository which
never appear in the remote repository.

Exercise 10:

Clone an existing repository from GitHub.

	$ git clone https://github.com/user_name/sample

If a subdirectory within the current working directory has the same name as the
repository, an error message is displayed and the repository cloning fails.

A [cheatsheet][2010] for Git and GitHub has been prepared by the folks at [GitHub][2011].

[1000]: https://www.coursera.org/specializations/jhu-data-science
[1001]: https://www.jhu.edu
[2005]: https://git-scm.com
[2010]: https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf
[2011]: https://github.com
[2014]: https://www.rstudio.com

END-----
